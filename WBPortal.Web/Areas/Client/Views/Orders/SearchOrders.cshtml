@using WBSSLStore.Web.Util;
@using WBSSLStore.Web.Helpers.PagedList;
@model  WBSSLStore.Web.Helpers.PagedList.IPagedList<WBSSLStore.Domain.OrderDetail>
@{
    ViewBag.version = WBSSLStore.Web.Helpers.Caching.SiteCacher.ResourceVersion();
    WBSiteSettings setting = new WBSiteSettings(WBSSLStore.Web.Helpers.Caching.SiteCacher.CurrentSite);
    ViewBag.Title = "Search Orders";
    string username = ViewBag.UserName;
    string CurrentLangCode = @setting.CurrentCultureKey;
}
@section sitecss{
    @System.Web.Optimization.Styles.Render("/bundales/jquery-ui-css?v=" + ViewBag.version)
}
@section Jscripts{
    @System.Web.Optimization.Scripts.Render("/bundales/wb/scripts?v=" + ViewBag.version)

   @if (CurrentLangCode != "en-US")
   {
    @System.Web.Optimization.Scripts.Render("/bundales/jquery-datepickerjs?v=" + ViewBag.version)
   }
    @System.Web.Optimization.Scripts.Render("/bundales/jquery-glob?v=" + ViewBag.version)
    @System.Web.Optimization.Scripts.Render("/bundales/jquery-glob-all?v=" + ViewBag.version)

    <script type="text/javascript" language="javascript">
        $(function () {
            var dates = $("#txtFromDate, #txtToDate").datepicker({
                changeMonth: true,
                changeYear: true,
                numberOfMonths: 1,
                showOn: "both",
                buttonImage: "/content/images/calendar.png",
                buttonImageOnly: true,
                onSelect: function (selectedDate) {
                    var option = this.id == "txtFromDate" ? "minDate" : "maxDate",
                        instance = $(this).data("datepicker"),
                        date = $.datepicker.parseDate(
                            instance.settings.dateFormat ||
                            $.datepicker._defaults.dateFormat,
                            selectedDate, instance.settings);
                    dates.not(this).datepicker("option", option, date, $.datepicker.regional["@(setting.CurrentCultureKey)"]);


                }
            });
        });
    </script>
@{
    setting = null;
}


}

@Html.Partial("_banner", new Tuple<string, string>("", WBSSLStore.Resources.GeneralMessage.Message.SearchOrder_Header))
<div class="content">
    <div class="wrapper">
        <div class="column3">
            <div class="column3-0">
                <div class="controlpnldata">
                    @using (Html.BeginForm("searchorders", "orders", FormMethod.Post))
                    {
                        <div class="searchodr halfrawform">

                            <div class="raw">
                                <label style="display:block;">@WBSSLStore.Resources.GeneralMessage.Message.DateRange_Caption:</label>
                                <div class="daterange">
                                    <input name="txtFromDate" type="text" size="10" class="in80px" readonly="readonly" id="txtFromDate" value="@(ViewBag.FormDate != null ? Convert.ToDateTime(ViewBag.FormDate).ToString("MM/dd/yyyy") : Convert.ToDateTime(DateTimeWithZone.Now.AddYears(-1)).ToString("MM/dd/yyyy") )" />
                                </div>
                                <div class="daterange">
                                    <input name="txtToDate" type="text" size="10" class="in80px" readonly="readonly" id="txtToDate" value="@(ViewBag.ToDate != null ? Convert.ToDateTime(ViewBag.ToDate).ToString("MM/dd/yyyy") : Convert.ToDateTime(DateTimeWithZone.Now).ToString("MM/dd/yyyy") )" />
                                </div>
                                <div class="clear"></div>
                            </div>
                            <div class="raw">
                                <label>@WBSSLStore.Resources.GeneralMessage.Message.InvoiceNo_Caption:</label>

                                <input name="textInvoiceID" type="text" id="textInvoiceID" @(ViewBag.InvoiceID != null ? ViewBag.InvoiceID : string.Empty) />
                            </div>
                            <div class="raw">
                                <label>@WBSSLStore.Resources.GeneralMessage.Message.OrderNumber_Caption:</label>
                                <input name="textOrderNumber" type="text" class="list200px" id="textOrderNumber" value="@(ViewBag.OrderNumber != null ? ViewBag.OrderNumber : string.Empty)" />
                            </div>
                            <div class="raw">
                                <label>@WBSSLStore.Resources.GeneralMessage.Message.Domain_Caption:</label>
                                <input name="txtDomainName" type="text" class="list200px" id="txtDomainName" value="@(ViewBag.DomainName != null ? ViewBag.DomainName : string.Empty)" />
                            </div>
                            <div class="raw">
                                <label>@WBSSLStore.Resources.GeneralMessage.Message.Product_Caption:</label>
                                <input name="textProductName" type="text" class="list200px" id="textProductName" value="@(ViewBag.Product != null ? ViewBag.Product : string.Empty)" />
                            </div>
                            <div class="raw">
                                <label>@WBSSLStore.Resources.GeneralMessage.Message.OrderStatus_Caption:</label>
                                <select id="lstStatus" onchange="1" name="lstStatus" class="select">
                                    <option value="-1" @(ViewBag.Status == "-1" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddlStatus_All
                                    </option>
                                    <option value="0" @(ViewBag.Status == "0" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddlStatus_Pending
                                    </option>
                                    <option value="1" @(ViewBag.Status == "1" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddlStatus_Active
                                    </option>
                                    <option value="2" @(ViewBag.Status == "2" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddl_Cancel
                                    </option>
                                    <option value="3" @(ViewBag.Status == "3" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddlStatus_Expired
                                    </option>
                                    <option value="4" @(ViewBag.Status == "4" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddlStatus_Expire 30
                                    </option>
                                    <option value="5" @(ViewBag.Status == "5" ? "selected=\"selected\"" : string.Empty)>
                                        @WBSSLStore.Resources.GeneralMessage.Message.ddlStatus_Expire 60
                                    </option>
                                </select>
                            </div>
                            <div class="raw srchbtnsec">
                                <input type="submit" value="@WBSSLStore.Resources.GeneralMessage.Message.Submit_Btn" class="subtns" id="btnSearch" name="btnSearch"
                                       style="float: left; margin-right: 10px;" />

                                <input type="submit" value="@WBSSLStore.Resources.GeneralMessage.Message.ExportToCSV_btn" class="exportcsvbtnbig" id="btnExport" name="btnExport"
                                       style="float: left;" />
                            </div>
                            <div class="clear"></div>
                        </div>
                    }
                        <div>
                            @{
                        RouteValueDictionary route = new RouteValueDictionary();

                        route.Add("lstStatus", ViewBag.Status);
                        route.Add("txtFromDate", ViewBag.FormDate);
                        route.Add("txtToDate", ViewBag.ToDate);
                        if (ViewBag.InvoiceID != null && !string.IsNullOrEmpty(ViewBag.InvoiceID))
                        {
                            route.Add("textInvoiceID", ViewBag.InvoiceID);
                        }
                        if (ViewBag.DomainName != null && !string.IsNullOrEmpty(ViewBag.DomainName))
                        {
                            route.Add("txtDomainName", ViewBag.DomainName);
                        }
                        if (ViewBag.Product != null && !string.IsNullOrEmpty(ViewBag.Product))
                        {
                            route.Add("textProductName", ViewBag.Product);
                        }
                            }
                            @Html.Partial("_orderslist", Tuple.Create<IPagedList<WBSSLStore.Domain.OrderDetail>, string>(Model, setting != null && !string.IsNullOrEmpty(setting.InvoicePrefix) ? setting.InvoicePrefix : "SSL-"))
                        </div>
                </div>
            </div>
            @Html.Partial("_rightpanel", username)
            <div class="clear"></div>
        </div>
    </div>
</div>
